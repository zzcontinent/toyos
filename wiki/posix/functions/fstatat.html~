<!-- Copyright 2001-2013 IEEE and The Open Group, All Rights Reserved -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link type="text/css" rel="stylesheet" href="style.css"><!-- Generated by The Open Group's rhtm tool v1.2.4 -->
<!-- Copyright (c) 2001-2013 The Open Group, All Rights Reserved -->
<title>fstatat</title>
</head>
<body bgcolor="white">
<div class="NAVHEADER">
<table summary="Header navigation table" class="nav" width="100%" border="0" cellpadding="0" cellspacing="0">
<tr class="nav">
<td class="nav" width="15%" align="left" valign="bottom"><a href="../functions/fstat.html" accesskey="P">&lt;&lt;&lt;
Previous</a></td>
<td class="nav" width="70%" align="center" valign="bottom"><a href="contents.html">Home</a></td>
<td class="nav" width="15%" align="right" valign="bottom"><a href="../functions/fstatvfs.html" accesskey="N">Next
&gt;&gt;&gt;</a></td>
</tr>
</table>

<hr align="LEFT" width="100%">
</div>

<script type="text/javascript" language="JavaScript" src="../jscript/codes.js">
</script>

<basefont size="3"> 

<center><font size="2">The Open Group Base Specifications Issue 7, 2018 edition<br>
IEEE Std 1003.1-2017 (Revision of IEEE Std 1003.1-2008)<br>
Copyright &copy; 2001-2018 IEEE and The Open Group</font></center>

<hr size="2" noshade>
<a name="top"></a> <a name="fstatat"></a> <a name="tag_16_174"></a><!-- fstatat -->
 

<h4 class="mansect"><a name="tag_16_174_01"></a>NAME</h4>

<blockquote>fstatat, lstat, stat - get file status</blockquote>

<h4 class="mansect"><a name="tag_16_174_02"></a>SYNOPSIS</h4>

<blockquote class="synopsis">
<p><code><tt><sup>[<a href="javascript:open_code('OH')">OH</a>]</sup> <img src="../images/opt-start.gif" border="0">#include
&lt;fcntl.h&gt;<img src="../images/opt-end.gif" border="0"> #include &lt;<a href="../basedefs/sys_stat.h.html">sys/stat.h</a>&gt;<br>
<br>
 int fstatat(int fd, const char *restrict</tt> <i>path</i><tt>,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct stat *restrict</tt> <i>buf</i><tt>, int</tt> <i>flag</i><tt>);<br>
 int lstat(const char *restrict</tt> <i>path</i><tt>, struct stat *restrict</tt> <i>buf</i><tt>);<br>
 int stat(const char *restrict</tt> <i>path</i><tt>, struct stat *restrict</tt> <i>buf</i><tt>);<br>
</tt></code></p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_03"></a>DESCRIPTION</h4>

<blockquote>
<p>The <i>stat</i>() function shall obtain information about the named file and write it to the area pointed to by the <i>buf</i>
argument. The <i>path</i> argument points to a pathname naming a file. Read, write, or execute permission of the named file is not
required. An implementation that provides additional or alternate file access control mechanisms may, under implementation-defined
conditions, cause <i>stat</i>() to fail. In particular, the system may deny the existence of the file specified by <i>path</i>.</p>

<p>If the named file is a symbolic link, the <i>stat</i>() function shall continue pathname resolution using the contents of the
symbolic link, and shall return information pertaining to the resulting file if the file exists.</p>

<p>The <i>buf</i> argument is a pointer to a <b>stat</b> structure, as defined in the <a href=
"../basedefs/sys_stat.h.html"><i>&lt;sys/stat.h&gt;</i></a> header, into which information is placed concerning the file.</p>

<p>The <i>stat</i>() function shall update any time-related fields (as described in XBD <a href=
"../basedefs/V1_chap04.html#tag_04_09"><i>File Times Update</i></a>), before writing into the <b>stat</b> structure.</p>

<p><sup>[<a href="javascript:open_code('SHM')">SHM</a>]</sup> <img src="../images/opt-start.gif" alt="[Option Start]" border="0">
If the named file is a shared memory object, the implementation shall update in the <b>stat</b> structure pointed to by the
<i>buf</i> argument the <i>st_uid</i>, <i>st_gid</i>, <i>st_size</i>, and <i>st_mode</i> fields, and only the S_IRUSR, S_IWUSR,
S_IRGRP, S_IWGRP, S_IROTH, and S_IWOTH file permission bits need be valid. The implementation may update other fields and flags.
<img src="../images/opt-end.gif" alt="[Option End]" border="0"></p>

<p><sup>[<a href="javascript:open_code('TYM')">TYM</a>]</sup> <img src="../images/opt-start.gif" alt="[Option Start]" border="0">
If the named file is a typed memory object, the implementation shall update in the <b>stat</b> structure pointed to by the
<i>buf</i> argument the <i>st_uid</i>, <i>st_gid</i>, <i>st_size</i>, and <i>st_mode</i> fields, and only the S_IRUSR, S_IWUSR,
S_IRGRP, S_IWGRP, S_IROTH, and S_IWOTH file permission bits need be valid. The implementation may update other fields and flags.
<img src="../images/opt-end.gif" alt="[Option End]" border="0"></p>

<p>For all other file types defined in this volume of POSIX.1-2017, the structure members <i>st_mode</i>, <i>st_ino</i>,
<i>st_dev</i>, <i>st_uid</i>, <i>st_gid</i>, <i>st_atim</i>, <i>st_ctim</i>, and <i>st_mtim</i> shall have meaningful values and
the value of the member <i>st_nlink</i> shall be set to the number of links to the file.</p>

<p>The <i>lstat</i>() function shall be equivalent to <i>stat</i>(), except when <i>path</i> refers to a symbolic link. In that
case <i>lstat</i>() shall return information about the link, while <i>stat</i>() shall return information about the file the link
references.</p>

<p>For symbolic links, the <i>st_mode</i> member shall contain meaningful information when used with the file type macros. The file
mode bits in <i>st_mode</i> are unspecified. The structure members <i>st_ino</i>, <i>st_dev</i>, <i>st_uid</i>, <i>st_gid</i>,
<i>st_atim</i>, <i>st_ctim</i>, and <i>st_mtim</i> shall have meaningful values and the value of the <i>st_nlink</i> member shall
be set to the number of (hard) links to the symbolic link. The value of the <i>st_size</i> member shall be set to the length of the
pathname contained in the symbolic link not including any terminating null byte.</p>

<p>The <i>fstatat</i>() function shall be equivalent to the <i>stat</i>() or <i>lstat</i>() function, depending on the value of
<i>flag</i> (see below), except in the case where <i>path</i> specifies a relative path. In this case the status shall be retrieved
from a file relative to the directory associated with the file descriptor <i>fd</i> instead of the current working directory. If
the access mode of the open file description associated with the file descriptor is not O_SEARCH, the function shall check whether
directory searches are permitted using the current permissions of the directory underlying the file descriptor. If the access mode
is O_SEARCH, the function shall not perform the check.</p>

<p>Values for <i>flag</i> are constructed by a bitwise-inclusive OR of flags from the following list, defined in <a href=
"../basedefs/fcntl.h.html"><i>&lt;fcntl.h&gt;</i></a>:</p>

<dl compact>
<dt>AT_SYMLINK_NOFOLLOW</dt>

<dd>
If <i>path</i> names a symbolic link, the status of the symbolic link is returned.</dd>
</dl>

<p>If <i>fstatat</i>() is passed the special value AT_FDCWD in the <i>fd</i> parameter, the current working directory shall be used
and the behavior shall be identical to a call to <i>stat</i>() or <i>lstat</i>() respectively, depending on whether or not the
AT_SYMLINK_NOFOLLOW bit is set in <i>flag</i>.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_04"></a>RETURN VALUE</h4>

<blockquote>
<p>Upon successful completion, these functions shall return 0. Otherwise, these functions shall return -1 and set <i>errno</i> to
indicate the error.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_05"></a>ERRORS</h4>

<blockquote>
<p>These functions shall fail if:</p>

<dl compact>
<dt>[EACCES]</dt>

<dd>Search permission is denied for a component of the path prefix.</dd>

<dt>[EIO]</dt>

<dd>An error occurred while reading from the file system.</dd>

<dt>[ELOOP]</dt>

<dd>A loop exists in symbolic links encountered during resolution of the <i>path</i> argument.</dd>

<dt>[ENAMETOOLONG]</dt>

<dd>
The length of a component of a pathname is longer than {NAME_MAX}.</dd>

<dt>[ENOENT]</dt>

<dd>A component of <i>path</i> does not name an existing file or <i>path</i> is an empty string.</dd>

<dt>[ENOTDIR]</dt>

<dd>A component of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory, or the
<i>path</i> argument contains at least one non- &lt;slash&gt; character and ends with one or more trailing &lt;slash&gt; characters
and the last pathname component names an existing file that is neither a directory nor a symbolic link to a directory.</dd>

<dt>[EOVERFLOW]</dt>

<dd>The file size in bytes or the number of blocks allocated to the file or the file serial number cannot be represented correctly
in the structure pointed to by <i>buf</i>.</dd>
</dl>

<p>The <i>fstatat</i>() function shall fail if:</p>

<dl compact>
<dt>[EACCES]</dt>

<dd>The access mode of the open file description associated with <i>fd</i> is not O_SEARCH and the permissions of the directory
underlying <i>fd</i> do not permit directory searches.</dd>

<dt>[EBADF]</dt>

<dd>The <i>path</i> argument does not specify an absolute path and the <i>fd</i> argument is neither AT_FDCWD nor a valid file
descriptor open for reading or searching.</dd>

<dt>[ENOTDIR]</dt>

<dd>The <i>path</i> argument is not an absolute path and <i>fd</i> is a file descriptor associated with a non-directory file.</dd>
</dl>

<p>These functions may fail if:</p>

<dl compact>
<dt>[ELOOP]</dt>

<dd>More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the <i>path</i> argument.</dd>

<dt>[ENAMETOOLONG]</dt>

<dd>
The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a
length that exceeds {PATH_MAX}.</dd>

<dt>[EOVERFLOW]</dt>

<dd>A value to be stored would overflow one of the members of the <b>stat</b> structure.</dd>
</dl>

<br>
<p>The <i>fstatat</i>() function may fail if:</p>

<dl compact>
<dt>[EINVAL]</dt>

<dd>The value of the <i>flag</i> argument is not valid.</dd>
</dl>
</blockquote>

<hr>
<div class="box"><em>The following sections are informative.</em></div>

<h4 class="mansect"><a name="tag_16_174_06"></a>EXAMPLES</h4>

<blockquote>
<h5><a name="tag_16_174_06_01"></a>Obtaining File Status Information</h5>

<p>The following example shows how to obtain file status information for a file named <b>/home/cnd/mod1</b>. The structure variable
<i>buffer</i> is defined for the <b>stat</b> structure.</p>

<pre>
<tt>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
<br>
struct stat buffer;
int         status;
...
status = stat("/home/cnd/mod1", &amp;buffer);
</tt>
</pre>

<h5><a name="tag_16_174_06_02"></a>Getting Directory Information</h5>

<p>The following example fragment gets status information for each entry in a directory. The call to the <i>stat</i>() function
stores file information in the <b>stat</b> structure pointed to by <i>statbuf</i>. The lines that follow the <i>stat</i>() call
format the fields in the <b>stat</b> structure for presentation to the user of the program.</p>

<pre>
<tt>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;dirent.h&gt;
#include &lt;pwd.h&gt;
#include &lt;grp.h&gt;
#include &lt;time.h&gt;
#include &lt;locale.h&gt;
#include &lt;langinfo.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
<br>
struct dirent  *dp;
struct stat     statbuf;
struct passwd  *pwd;
struct group   *grp;
struct tm      *tm;
char            datestring[256];
...
/* Loop through directory entries. */
while ((dp = readdir(dir)) != NULL) {
<br>
    /* Get entry's information. */
    if (stat(dp-&gt;d_name, &amp;statbuf) == -1)
        continue;
<br>
    /* Print out type, permissions, and number of links. */
    printf("%10.10s", sperm (statbuf.st_mode));
    printf("%4d", statbuf.st_nlink);
<br>
    /* Print out owner's name if it is found using getpwuid(). */
    if ((pwd = getpwuid(statbuf.st_uid)) != NULL)
        printf(" %-8.8s", pwd-&gt;pw_name);
    else
        printf(" %-8d", statbuf.st_uid);
<br>
    /* Print out group name if it is found using getgrgid(). */
    if ((grp = getgrgid(statbuf.st_gid)) != NULL)
        printf(" %-8.8s", grp-&gt;gr_name);
    else
        printf(" %-8d", statbuf.st_gid);
<br>
    /* Print size of file. */
    printf(" %9jd", (intmax_t)statbuf.st_size);
<br>
    tm = localtime(&amp;statbuf.st_mtime);
<br>
    /* Get localized date string. */
    strftime(datestring, sizeof(datestring), nl_langinfo(D_T_FMT), tm);
<br>
    printf(" %s %s\n", datestring, dp-&gt;d_name);
}
</tt>
</pre>

<h5><a name="tag_16_174_06_03"></a>Obtaining Symbolic Link Status Information</h5>

<p>The following example shows how to obtain status information for a symbolic link named <b>/modules/pass1</b>. The structure
variable <i>buffer</i> is defined for the <b>stat</b> structure. If the <i>path</i> argument specified the pathname for the file
pointed to by the symbolic link (<b>/home/cnd/mod1</b>), the results of calling the function would be the same as those returned
by a call to the <i>stat</i>() function.</p>

<pre>
<tt>#include &lt;sys/stat.h&gt;
<br>
struct stat buffer;
int status;
...
status = lstat("/modules/pass1", &amp;buffer);
</tt>
</pre>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_07"></a>APPLICATION USAGE</h4>

<blockquote>
<p>None.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_08"></a>RATIONALE</h4>

<blockquote>
<p>The intent of the paragraph describing &quot;additional or alternate file access control mechanisms&quot; is to allow a secure
implementation where a process with a label that does not dominate the file's label cannot perform a <i>stat</i>() function. This
is not related to read permission; a process with a label that dominates the file's label does not need read permission. An
implementation that supports write-up operations could fail <a href="../functions/fstat.html"><i>fstat</i>()</a> function calls
even though it has a valid file descriptor open for writing.</p>

<p>The purpose of the <i>fstatat</i>() function is to obtain the status of files in directories other than the current working
directory without exposure to race conditions. Any part of the path of a file could be changed in parallel to a call to
<i>stat</i>(), resulting in unspecified behavior. By opening a file descriptor for the target directory and using the
<i>fstatat</i>() function it can be guaranteed that the file for which status is returned is located relative to the desired
directory.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_09"></a>FUTURE DIRECTIONS</h4>

<blockquote>
<p>None.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_10"></a>SEE ALSO</h4>

<blockquote>
<p><a href="../functions/access.html#"><i>access</i></a>, <a href="../functions/chmod.html#tag_16_58"><i>chmod</i></a>, <a href=
"../functions/fdopendir.html#"><i>fdopendir</i></a>, <a href="../functions/fstat.html#"><i>fstat</i></a>, <a href=
"../functions/mknod.html#"><i>mknod</i></a>, <a href="../functions/readlink.html#"><i>readlink</i></a>, <a href=
"../functions/symlink.html#"><i>symlink</i></a></p>

<p>XBD <a href="../basedefs/V1_chap04.html#tag_04_09"><i>File Times Update</i></a>, <a href=
"../basedefs/fcntl.h.html"><i>&lt;fcntl.h&gt;</i></a>, <a href="../basedefs/sys_stat.h.html"><i>&lt;sys/stat.h&gt;</i></a>, <a
href="../basedefs/sys_types.h.html"><i>&lt;sys/types.h&gt;</i></a></p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_11"></a>CHANGE HISTORY</h4>

<blockquote>
<p>First released in Issue 1. Derived from Issue 1 of the SVID.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_12"></a>Issue 5</h4>

<blockquote>
<p>Large File Summit extensions are added.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_13"></a>Issue 6</h4>

<blockquote>
<p>In the SYNOPSIS, the optional include of the <a href="../basedefs/sys_types.h.html"><i>&lt;sys/types.h&gt;</i></a> header is
removed.</p>

<p>The following new requirements on POSIX implementations derive from alignment with the Single UNIX Specification:</p>

<ul>
<li>
<p>The requirement to include <a href="../basedefs/sys_types.h.html"><i>&lt;sys/types.h&gt;</i></a> has been removed. Although <a
href="../basedefs/sys_types.h.html"><i>&lt;sys/types.h&gt;</i></a> was required for conforming implementations of previous POSIX
specifications, it was not required for UNIX applications.</p>
</li>

<li>
<p>The [EIO] mandatory error condition is added.</p>
</li>

<li>
<p>The [ELOOP] mandatory error condition is added.</p>
</li>

<li>
<p>The [EOVERFLOW] mandatory error condition is added. This change is to support large files.</p>
</li>

<li>
<p>The [ENAMETOOLONG] and the second [EOVERFLOW] optional error conditions are added.</p>
</li>
</ul>

<p>The following changes were made to align with the IEEE&nbsp;P1003.1a draft standard:</p>

<ul>
<li>
<p>Details are added regarding the treatment of symbolic links.</p>
</li>

<li>
<p>The [ELOOP] optional error condition is added.</p>
</li>
</ul>

<p>The normative text is updated to avoid use of the term &quot;must&quot; for application requirements.</p>

<p>The <b>restrict</b> keyword is added to the <i>stat</i>() prototype for alignment with the ISO/IEC&nbsp;9899:1999 standard.</p>
</blockquote>

<h4 class="mansect"><a name="tag_16_174_14"></a>Issue 7</h4>

<blockquote>
<p>Austin Group Interpretation 1003.1-2001 #143 is applied.</p>

<p>XSH-SD5-ERN-161 is applied, updating the DESCRIPTION to clarify to which file types <i>st_nlink</i> applies.</p>

<p>The <i>fstatat</i>() function is added from The Open Group Technical Standard, 2006, Extended API Set Part 2.</p>

<p>Changes are made related to support for finegrained timestamps.</p>

<p>The <i>lstat</i>() function is now required to return meaningful data for symbolic links in all <b>stat</b> structure fields,
except for the permission bits of <i>st_mode</i>.</p>

<p>Changes are made to allow a directory to be opened for searching.</p>

<p>The [ENOTDIR] error condition is clarified to cover the condition where the last component of a pathname exists but is not a
directory or a symbolic link to a directory.</p>

<p>POSIX.1-2008, Technical Corrigendum 1, XSH/TC1-2008/0198 [461], XSH/TC1-2008/0199 [324], XSH/TC1-2008/0200 [278],
XSH/TC1-2008/0201 [278], and XSH/TC1-2008/0202 [291] are applied.</p>

<p>POSIX.1-2008, Technical Corrigendum 2, XSH/TC2-2008/0136 [591], XSH/TC2-2008/0137 [817], XSH/TC2-2008/0138 [817], and
XSH/TC2-2008/0139 [889] are applied.</p>
</blockquote>

<div class="box"><em>End of informative text.</em></div>

<hr>
<p>&nbsp;</p>

<a href="#top"><span class="topOfPage">return to top of page</span></a><br>
<hr size="2" noshade>
<center><font size="2">UNIX &reg; is a registered Trademark of The Open Group.<br>
POSIX &reg; is a registered Trademark of The IEEE.<br>
Copyright &copy; 2001-2018 IEEE and The Open Group, All Rights Reserved<br>
[ <a href="../mindex.html">Main Index</a> | <a href="../basedefs/contents.html">XBD</a> | <a href=
"../functions/contents.html">XSH</a> | <a href="../utilities/contents.html">XCU</a> | <a href="../xrat/contents.html">XRAT</a>
]</font></center>

<hr size="2" noshade>
<div class="NAVHEADER">
<table summary="Header navigation table" class="nav" width="100%" border="0" cellpadding="0" cellspacing="0">
<tr class="nav">
<td class="nav" width="15%" align="left" valign="bottom"><a href="../functions/fstat.html" accesskey="P">&lt;&lt;&lt;
Previous</a></td>
<td class="nav" width="70%" align="center" valign="bottom"><a href="contents.html">Home</a></td>
<td class="nav" width="15%" align="right" valign="bottom"><a href="../functions/fstatvfs.html" accesskey="N">Next
&gt;&gt;&gt;</a></td>
</tr>
</table>

<hr align="LEFT" width="100%">
</div>
</body>
</html>

