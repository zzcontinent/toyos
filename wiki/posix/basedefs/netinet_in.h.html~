<!-- Copyright 2001-2013 IEEE and The Open Group, All Rights Reserved -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link type="text/css" rel="stylesheet" href="style.css"><!-- Generated by The Open Group's rhtm tool v1.2.4 -->
<!-- Copyright (c) 2001-2013 The Open Group, All Rights Reserved -->
<title>&lt;netinet/in.h&gt;</title>
</head>
<body bgcolor="white">
<div class="NAVHEADER">
<table summary="Header navigation table" class="nav" width="100%" border="0" cellpadding="0" cellspacing="0">
<tr class="nav">
<td class="nav" width="15%" align="left" valign="bottom"><a href="../basedefs/netdb.h.html" accesskey="P">&lt;&lt;&lt;
Previous</a></td>
<td class="nav" width="70%" align="center" valign="bottom"><a href="contents.html">Home</a></td>
<td class="nav" width="15%" align="right" valign="bottom"><a href="../basedefs/netinet_tcp.h.html" accesskey="N">Next
&gt;&gt;&gt;</a></td>
</tr>
</table>

<hr align="LEFT" width="100%">
</div>

<script type="text/javascript" language="JavaScript" src="../jscript/codes.js">
</script>

<basefont size="3"> 

<center><font size="2">The Open Group Base Specifications Issue 7, 2018 edition<br>
IEEE Std 1003.1-2017 (Revision of IEEE Std 1003.1-2008)<br>
Copyright &copy; 2001-2018 IEEE and The Open Group</font></center>

<hr size="2" noshade>
<a name="top"></a> <a name="&lt;netinet/in.h&gt;"></a> <a name="tag_13_31"></a><!-- &lt;netinet/in.h&gt; -->
 

<h4 class="mansect"><a name="tag_13_31_01"></a>NAME</h4>

<blockquote>netinet/in.h - Internet address family</blockquote>

<h4 class="mansect"><a name="tag_13_31_02"></a>SYNOPSIS</h4>

<blockquote class="synopsis">
<p><tt>#include &lt;netinet/in.h&gt;</tt></p>
</blockquote>

<h4 class="mansect"><a name="tag_13_31_03"></a>DESCRIPTION</h4>

<blockquote>
<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the following types:</p>

<dl compact>
<dt><b>in_port_t</b></dt>

<dd>Equivalent to the type <b>uint16_t</b> as described in <a href=
"../basedefs/inttypes.h.html"><i>&lt;inttypes.h&gt;</i></a>.</dd>

<dt><b>in_addr_t</b></dt>

<dd>Equivalent to the type <b>uint32_t</b> as described in <a href=
"../basedefs/inttypes.h.html"><i>&lt;inttypes.h&gt;</i></a>.</dd>
</dl>

<p>The <i>&lt;netinet_in.h&gt;</i> header shall define the <b>sa_family_t</b> type as described in <a href=
"../basedefs/sys_socket.h.html"><i>&lt;sys/socket.h&gt;</i></a>.</p>

<p>The <i>&lt;netinet_in.h&gt;</i> header shall define the <b>uint8_t</b> and <b>uint32_t</b> types as described in <a href=
"../basedefs/inttypes.h.html"><i>&lt;inttypes.h&gt;</i></a>. Inclusion of the <i>&lt;netinet/in.h&gt;</i> header may also make
visible all symbols from <a href="../basedefs/inttypes.h.html"><i>&lt;inttypes.h&gt;</i></a> and <a href=
"../basedefs/sys_socket.h.html"><i>&lt;sys/socket.h&gt;</i></a>.</p>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the <b>in_addr</b> structure, which shall include at least the following
member:</p>

<pre>
<tt>in_addr_t  s_addr
</tt>
</pre>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the <b>sockaddr_in</b> structure, which shall include at least the following
members:</p>

<pre>
<tt>sa_family_t     sin_family  </tt> AF_INET. <tt>
in_port_t       sin_port    </tt> Port number. <tt>
struct in_addr  sin_addr    </tt> IP address. <tt>
</tt>
</pre>

<p>The <i>sin_port</i> and <i>sin_addr</i> members shall be in network byte order.</p>

<p>The <b>sockaddr_in</b> structure is used to store addresses for the Internet address family. Pointers to this type shall be cast
by applications to <b>struct sockaddr *</b> for use with socket functions.</p>

<p><sup>[<a href="javascript:open_code('IP6')">IP6</a>]</sup> <img src="../images/opt-start.gif" alt="[Option Start]" border="0">
The <i>&lt;netinet/in.h&gt;</i> header shall define the <b>in6_addr</b> structure, which shall include at least the following
member:</p>

<pre>
<tt>uint8_t s6_addr[16]
</tt>
</pre>

<p>This array is used to contain a 128-bit IPv6 address, stored in network byte order.</p>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the <b>sockaddr_in6</b> structure, which shall include at least the
following members:</p>

<pre>
<tt>sa_family_t      sin6_family   </tt> AF_INET6. <tt>
in_port_t        sin6_port     </tt> Port number. <tt>
uint32_t         sin6_flowinfo </tt> IPv6 traffic class and flow information. <tt>
struct in6_addr  sin6_addr     </tt> IPv6 address. <tt>
uint32_t         sin6_scope_id </tt> Set of interfaces for a scope. <tt>
</tt>
</pre>

<p>The <i>sin6_port</i> and <i>sin6_addr</i> members shall be in network byte order.</p>

<p>Prior to calling a function in this standard which reads values from a <b>sockaddr_in6</b> structure (for example, <a href=
"../functions/bind.html"><i>bind</i>()</a> or <a href="../functions/connect.html"><i>connect</i>()</a>), the application shall
ensure that all members of the structure, including any additional non-standard members, if any, are initialized. If the
<b>sockaddr_in6</b> structure has a non-standard member, and that member has a value other than the value that would result from
default initialization, the behavior of any function in this standard that reads values from the <b>sockaddr_in6</b> structure is
implementation-defined. All functions in this standard that return data in a <b>sockaddr_in6</b> structure (for example, <a href=
"../functions/getaddrinfo.html"><i>getaddrinfo</i>()</a> or <a href="../functions/accept.html"><i>accept</i>()</a>) shall
initialize the structure in a way that meets the above requirements, and shall ensure that each non-standard member, if any, has a
value that produces the same behavior as default initialization would in all functions in this standard which read values from a
<b>sockaddr_in6</b> structure.</p>

<p>The <i>sin6_scope_id</i> field is a 32-bit integer that identifies a set of interfaces as appropriate for the scope of the
address carried in the <i>sin6_addr</i> field. For a link scope <i>sin6_addr</i>, the application shall ensure that
<i>sin6_scope_id</i> is a link index. For a site scope <i>sin6_addr</i>, the application shall ensure that <i>sin6_scope_id</i> is
a site index. The mapping of <i>sin6_scope_id</i> to an interface or set of interfaces is implementation-defined.</p>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall declare the following external variable:</p>

<pre>
<tt>const struct in6_addr in6addr_any
</tt>
</pre>

<p>This variable is initialized by the system to contain the wildcard IPv6 address. The <i>&lt;netinet/in.h&gt;</i> header also
defines the IN6ADDR_ANY_INIT macro. This macro must be constant at compile time and can be used to initialize a variable of type
<b>struct in6_addr</b> to the IPv6 wildcard address.</p>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall declare the following external variable:</p>

<pre>
<tt>const struct in6_addr in6addr_loopback
</tt>
</pre>

<p>This variable is initialized by the system to contain the loopback IPv6 address. The <i>&lt;netinet/in.h&gt;</i> header also
defines the IN6ADDR_LOOPBACK_INIT macro. This macro must be constant at compile time and can be used to initialize a variable of
type <b>struct in6_addr</b> to the IPv6 loopback address.</p>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the <b>ipv6_mreq</b> structure, which shall include at least the following
members:</p>

<pre>
<tt>struct in6_addr  ipv6mr_multiaddr </tt> IPv6 multicast address. <tt>
unsigned         ipv6mr_interface </tt> Interface index. <tt>
</tt>
</pre>

<img src="../images/opt-end.gif" alt="[Option End]" border="0"> 

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the following symbolic constants for use as values of the <i>level</i>
argument of <a href="../functions/getsockopt.html"><i>getsockopt</i>()</a> and <a href=
"../functions/setsockopt.html"><i>setsockopt</i>()</a>:</p>

<dl compact>
<dt>IPPROTO_IP</dt>

<dd>Internet protocol.</dd>

<dt>IPPROTO_IPV6</dt>

<dd><sup>[<a href="javascript:open_code('IP6')">IP6</a>]</sup> <img src="../images/opt-start.gif" alt="[Option Start]" border="0">
Internet Protocol Version 6. <img src="../images/opt-end.gif" alt="[Option End]" border="0"></dd>

<dt>IPPROTO_ICMP</dt>

<dd>Control message protocol.</dd>

<dt>IPPROTO_RAW</dt>

<dd><sup>[<a href="javascript:open_code('RS')">RS</a>]</sup> <img src="../images/opt-start.gif" alt="[Option Start]" border="0">
Raw IP Packets Protocol. <img src="../images/opt-end.gif" alt="[Option End]" border="0"></dd>

<dt>IPPROTO_TCP</dt>

<dd>Transmission control protocol.</dd>

<dt>IPPROTO_UDP</dt>

<dd>User datagram protocol.</dd>
</dl>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the following symbolic constant for use as a local address in the structure
passed to <a href="../functions/bind.html"><i>bind</i>()</a>:</p>

<dl compact>
<dt>INADDR_ANY</dt>

<dd>IPv4 wildcard address.</dd>
</dl>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the following symbolic constant for use as a destination address in the
structures passed to <a href="../functions/connect.html"><i>connect</i>()</a>, <a href=
"../functions/sendmsg.html"><i>sendmsg</i>()</a>, and <a href="../functions/sendto.html"><i>sendto</i>()</a>:</p>

<dl compact>
<dt>INADDR_BROADCAST</dt>

<dd>IPv4 broadcast address.</dd>
</dl>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the following symbolic constant, with the value specified, to help
applications declare buffers of the proper size to store IPv4 addresses in string form:</p>

<dl compact>
<dt>INET_ADDRSTRLEN</dt>

<dd>16. Length of the string form for IP.</dd>
</dl>

<p>The <a href="../functions/htonl.html"><i>htonl</i>()</a>, <a href="../functions/htons.html"><i>htons</i>()</a>, <a href=
"../functions/ntohl.html"><i>ntohl</i>()</a>, and <a href="../functions/ntohs.html"><i>ntohs</i>()</a> functions shall be available
as described in <a href="../basedefs/arpa_inet.h.html"><i>&lt;arpa/inet.h&gt;</i></a>. Inclusion of the <i>&lt;netinet/in.h&gt;</i>
header may also make visible all symbols from <a href="../basedefs/arpa_inet.h.html"><i>&lt;arpa/inet.h&gt;</i></a>.</p>

<p><sup>[<a href="javascript:open_code('IP6')">IP6</a>]</sup> <img src="../images/opt-start.gif" alt="[Option Start]" border="0">
The <i>&lt;netinet/in.h&gt;</i> header shall define the following symbolic constant, with the value specified, to help applications
declare buffers of the proper size to store IPv6 addresses in string form:</p>

<dl compact>
<dt>INET6_ADDRSTRLEN</dt>

<dd>46. Length of the string form for IPv6.</dd>
</dl>

<img src="../images/opt-end.gif" alt="[Option End]" border="0"><br>
<p><sup>[<a href="javascript:open_code('IP6')">IP6</a>]</sup> <img src="../images/opt-start.gif" alt="[Option Start]" border="0">
The <i>&lt;netinet/in.h&gt;</i> header shall define the following symbolic constants, with distinct integer values, for use in the
<i>option_name</i> argument in the <a href="../functions/getsockopt.html"><i>getsockopt</i>()</a> or <a href=
"../functions/setsockopt.html"><i>setsockopt</i>()</a> functions at protocol level IPPROTO_IPV6:</p>

<dl compact>
<dt>IPV6_JOIN_GROUP</dt>

<dd>Join a multicast group.</dd>

<dt>IPV6_LEAVE_GROUP</dt>

<dd>Quit a multicast group.</dd>

<dt>IPV6_MULTICAST_HOPS</dt>

<dd>
Multicast hop limit.</dd>

<dt>IPV6_MULTICAST_IF</dt>

<dd>Interface to use for outgoing multicast packets.</dd>

<dt>IPV6_MULTICAST_LOOP</dt>

<dd>
Multicast packets are delivered back to the local application.</dd>

<dt>IPV6_UNICAST_HOPS</dt>

<dd>Unicast hop limit.</dd>

<dt>IPV6_V6ONLY</dt>

<dd>Restrict AF_INET6 socket to IPv6 communications only.</dd>
</dl>

<p>The <i>&lt;netinet/in.h&gt;</i> header shall define the following macros that test for special IPv6 addresses. Each macro is of
type <b>int</b> and takes a single argument of type <b>const struct in6_addr *</b>:</p>

<dl compact>
<dt>IN6_IS_ADDR_UNSPECIFIED</dt>

<dd>
Unspecified address.</dd>

<dt>IN6_IS_ADDR_LOOPBACK</dt>

<dd>
Loopback address.</dd>

<dt>IN6_IS_ADDR_MULTICAST</dt>

<dd>
Multicast address.</dd>

<dt>IN6_IS_ADDR_LINKLOCAL</dt>

<dd>
Unicast link-local address.</dd>

<dt>IN6_IS_ADDR_SITELOCAL</dt>

<dd>
Unicast site-local address.</dd>

<dt>IN6_IS_ADDR_V4MAPPED</dt>

<dd>
IPv4 mapped address.</dd>

<dt>IN6_IS_ADDR_V4COMPAT</dt>

<dd>
IPv4-compatible address.</dd>

<dt>IN6_IS_ADDR_MC_NODELOCAL</dt>

<dd>
Multicast node-local address.</dd>

<dt>IN6_IS_ADDR_MC_LINKLOCAL</dt>

<dd>
Multicast link-local address.</dd>

<dt>IN6_IS_ADDR_MC_SITELOCAL</dt>

<dd>
Multicast site-local address.</dd>

<dt>IN6_IS_ADDR_MC_ORGLOCAL</dt>

<dd>
Multicast organization-local address.</dd>

<dt>IN6_IS_ADDR_MC_GLOBAL</dt>

<dd>
Multicast global address.</dd>
</dl>

<img src="../images/opt-end.gif" alt="[Option End]" border="0"></blockquote>

<hr>
<div class="box"><em>The following sections are informative.</em></div>

<h4 class="mansect"><a name="tag_13_31_04"></a>APPLICATION USAGE</h4>

<blockquote>
<p>Although applications are required to initialize all members (including any non-standard ones) of a <b>sockaddr_in6</b>
structure, the same is not required for the <b>sockaddr_in</b> structure, since historically many applications only initialized the
standard members. Despite this, applications are encouraged to initialize <b>sockaddr_in</b> structures in a manner similar to the
required initialization of <b>sockaddr_in6</b> structures.</p>

<p>Although it is common practice to initialize a <b>sockaddr_in6</b> structure using:</p>

<pre>
<tt>struct sockaddr_in6 sa;
memset(&amp;sa, 0, sizeof sa);
</tt>
</pre>

<p>this method is not portable according to this standard, because the structure can contain pointer or floating-point members that
are not required to have an all-bits-zero representation after default initialization. Portable methods make use of default
initialization; for example:</p>

<pre>
<tt>struct sockaddr_in6 sa = { 0 };
</tt>
</pre>

<p>or:</p>

<pre>
<tt>static struct sockaddr_in6 sa_init;
struct sockaddr_in6 sa = sa_init;
</tt>
</pre>

<p>A future version of this standard may require that a pointer object with an all-bits-zero representation is a null pointer, and
that <b>sockaddr_in6</b> does not have any floating-point members if a floating-point object with an all-bits-zero representation
does not have the value 0.0.</p>
</blockquote>

<h4 class="mansect"><a name="tag_13_31_05"></a>RATIONALE</h4>

<blockquote>
<p>The INADDR_ANY and INADDR_BROADCAST values are byte-order-neutral and thus their byte order is not specified. Many
implementations have additional constants as extensions, such as INADDR_LOOPBACK, that are not byte-order-neutral. Traditionally,
these constants are in host byte order, requiring the use of <a href="../functions/htonl.html"><i>htonl</i>()</a> when using them
in a <b>sockaddr_in</b> structure.</p>
</blockquote>

<h4 class="mansect"><a name="tag_13_31_06"></a>FUTURE DIRECTIONS</h4>

<blockquote>
<p>None.</p>
</blockquote>

<h4 class="mansect"><a name="tag_13_31_07"></a>SEE ALSO</h4>

<blockquote>
<p><a href="../basedefs/V1_chap04.html#tag_04_10"><i>Host and Network Byte Orders</i></a>, <a href=
"../basedefs/arpa_inet.h.html"><i>&lt;arpa/inet.h&gt;</i></a>, <a href="../basedefs/inttypes.h.html"><i>&lt;inttypes.h&gt;</i></a>
, <a href="../basedefs/sys_socket.h.html"><i>&lt;sys/socket.h&gt;</i></a></p>

<p>XSH <a href="../functions/connect.html#"><i>connect</i></a>, <a href="../functions/getsockopt.html#"><i>getsockopt</i></a>, <a
href="../functions/htonl.html#"><i>htonl</i></a>, <a href="../functions/sendmsg.html#"><i>sendmsg</i></a>, <a href=
"../functions/sendto.html#"><i>sendto</i></a>, <a href="../functions/setsockopt.html#"><i>setsockopt</i></a></p>
</blockquote>

<h4 class="mansect"><a name="tag_13_31_08"></a>CHANGE HISTORY</h4>

<blockquote>
<p>First released in Issue 6. Derived from the XNS, Issue 5.2 specification.</p>

<p>The <i>sin_zero</i> member was removed from the <b>sockaddr_in</b> structure as per The Open Group Base Resolution
bwg2001-004.</p>

<p>IEEE&nbsp;Std&nbsp;1003.1-2001/Cor&nbsp;1-2002, item XBD/TC1/D6/12 is applied, adding <b>const</b> qualifiers to the
<i>in6addr_any</i> and <i>in6addr_loopback</i> external variables.</p>

<p>IEEE&nbsp;Std&nbsp;1003.1-2001/Cor&nbsp;2-2004, item XBD/TC2/D6/22 is applied, making it clear which structure members are in
network byte order.</p>
</blockquote>

<h4 class="mansect"><a name="tag_13_31_09"></a>Issue 7</h4>

<blockquote>
<p>This reference page is clarified with respect to macros and symbolic constants.</p>

<p>POSIX.1-2008, Technical Corrigendum 1, XBD/TC1-2008/0061 [355] is applied.</p>

<p>POSIX.1-2008, Technical Corrigendum 2, XBD/TC2-2008/0065 [934], XBD/TC2-2008/0066 [952], XBD/TC2-2008/0067 [934], and
XBD/TC2-2008/0068 [952] are applied.</p>
</blockquote>

<div class="box"><em>End of informative text.</em></div>

<hr>
<p>&nbsp;</p>

<a href="#top"><span class="topOfPage">return to top of page</span></a><br>
<hr size="2" noshade>
<center><font size="2">UNIX &reg; is a registered Trademark of The Open Group.<br>
POSIX &reg; is a registered Trademark of The IEEE.<br>
Copyright &copy; 2001-2018 IEEE and The Open Group, All Rights Reserved<br>
[ <a href="../mindex.html">Main Index</a> | <a href="../basedefs/contents.html">XBD</a> | <a href=
"../functions/contents.html">XSH</a> | <a href="../utilities/contents.html">XCU</a> | <a href="../xrat/contents.html">XRAT</a>
]</font></center>

<hr size="2" noshade>
<div class="NAVHEADER">
<table summary="Header navigation table" class="nav" width="100%" border="0" cellpadding="0" cellspacing="0">
<tr class="nav">
<td class="nav" width="15%" align="left" valign="bottom"><a href="../basedefs/netdb.h.html" accesskey="P">&lt;&lt;&lt;
Previous</a></td>
<td class="nav" width="70%" align="center" valign="bottom"><a href="contents.html">Home</a></td>
<td class="nav" width="15%" align="right" valign="bottom"><a href="../basedefs/netinet_tcp.h.html" accesskey="N">Next
&gt;&gt;&gt;</a></td>
</tr>
</table>

<hr align="LEFT" width="100%">
</div>
</body>
</html>

